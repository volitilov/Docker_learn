# definitions.py

# Сдесь хронится терминология

# хорошая статья основ на руском:
# https://habr.com/post/353238/

# документация на английском:
# https://www.docker.com/

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Docker
# Когда мы устанавливаем докер на локальную машину, то получаем клиент (CLI) 
# и http-сервер, работающий как демон. Сервер предоставляет REST API, а 
# консоль просто преобразует введенные команды в http-запросы.

Registry
# Registry — это хранилище образов. Самым известным является DockerHub. Он 
# напоминает GitHub, только содержит образы, а не исходный код. На DockerHub 
# также есть репозитории, публичные и приватные, можно скачивать 
# образы (pull), заливать изменения образов (push). Скачанные однажды образы 
# и собранные на их основе контейнеры хранятся локально, пока не будут 
# удалены вручную.
# Существует возможность создания своего хранилища образов, тогда при 
# необходимости Docker будет искать там образы, которых еще нет локально. 
# Надо сказать, что при использовании Docker хранилище образов становится 
# важнейшим звеном в CI/CD: разработчик делает коммит в репозиторий, 
# запускаются тесты. Если тесты прошли успешно, то на основе коммита 
# обновляется существующий или собирается новый образ с последующим деплоем. 
# Причем в registry обновляются не целые образы, а только необходимые слои.

Image (образ)
# собранная подсистема, необходимая для работы процесса, сохраненная в 
# образе. Образ в первом приближении можно рассматривать как набор файлов. 
# В состав образа входит все необходимое для запуска и работы приложения на 
# голой машине с докером: ОС, среда выполнения и приложение, готовое к 
# развертыванию.
# Образ состоит из слоев, каждый из которых представляет собой неизменяемую 
# файловую систему, а по-простому набор файлов и директорий. Образ в целом 
# представляет собой объединенную файловую систему (Union File System), 
# которую можно рассматривать как результат слияния файловых систем слоев. 
# Совместное использование проявляется также и при скачивании образа. Первым 
# загружается манифест, который описывает какие слои входят в образ. Далее 
# скачиваются только те слои из манифеста, которых еще нет локально. Т.о. 
# если мы для MyApplication уже скачали ядро и ОС, то для PostgreSQL и 
# Node.js эти слои уже загружаться не будут.
# Подытожим:
# - Образ — это набор файлов, необходимых для работы приложения на голой 
#   машине с установленным Docker.
# - Образ состоит из неизменяемых слоев, каждый из которых 
#   добавляет/удаляет/изменяет файлы из предыдущего слоя.
# - Неизменяемость слоев позволяет их использовать совместно в разных 
#   образах.

Container (контейнер)
# процесс, инициализированный на базе образа. То есть контейнер существует 
# только когда запущен. Это как экземпляр класса, а образ это типа класс.
# Само понятие контейнеров не ново и давно известно в Linux. Идея состоит 
# в том, чтобы в рамках одной ОС выделить изолированную область и запускать 
# в ней приложение. В этом случае говорим о виртуализации на уровне ОС. В 
# отличие от ВМ контейнеры изолированно используют свой кусочек ОС.
# Docker-контейнер строится на основе образа. Суть преобразования образа в 
# контейнер состоит в добавлении верхнего слоя, для которого разрешена 
# запись. Результаты работы приложения (файлы) пишутся именно в этом слое.
# Например, мы создали на основе образа с PostgreSQL сервером контейнер и 
# запустили его. Когда мы создаем БД, то соответствующие файлы появляются 
# в верхнем слое контейнера — слое для записи.
# Можно провести и обратную операцию: из контейнера сделать образ. Верхний 
# слой контейнера отличается от остальных только лишь разрешением на запись, 
# в остальном это обычный слой — набор файлов и директорий. Делая верхний 
# слой read only, мы преобразуем контейнер в образ.

Host (хост)
# среда, в которой запускается докер. Проще говоря – ваша локальная машина.

Volume
# это дисковое пространство между хостом и контейнером. Проще – это папка 
# на вашей локальной машине примонтированная внутрь контейнера. Меняете тут 
# меняется там, и наоборот.

Dockerfile
# Dockerfile представляет собой набор инструкций, на основе которых строится 
# новый образ. Каждая инструкция добавляет новый слой к образу.

Service (сервис)
# по сути это запущенный образ (один или несколько контейнеров), 
# дополнительно сконфигурированный такими опциями как открытие портов, 
# маппинг папок (volume) и прочее. Обычно это делается при помощи 
# docker-compose.yml файла.

Docker-compose (докер-композ, чаще композер, но не путать с php composer)
# тулза, облегчающая сборку и запуск системы состоящей из нескольких 
# контейнеров, связанных между собой. 

Build (билд, билдить)
# процесс создания образа из набора инструкций в докерфайле, или нескольких 
# докерфайлов, если билд делается с помощью композера