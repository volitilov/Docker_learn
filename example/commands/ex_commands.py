# ex_commands.py

# Примеры консольных комманд для Docker

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

$ sudo chmod ug+s /usr/bin/docker
# Убирает постаянные запросы на прова sudo 

$ docker run -it ubuntu /bin/bash
# Флаг -i оставляет STDIN открытым, даже, когда вы не присоединены к 
# контейнеру. Флаг -t назначает псевдо-tty контейнеру. Таким образом 
# создается интерактивный интерфейс к контейнеру. Так же мы указываем 
# название образа (ubuntu — базовый образ) и шелл /bin/bash.

$ exit
# Выйти из контейнера

$ docker ps -a
# Показывает спесок всех контейнеров включая остановленные

$ docker run --name habrahabr -ti ubuntu
# Указывает другое имя контейнера при создании

$ docker start ubuntu
# Запуск контейнера ubuntu
# Обращаться к контейнеру можно не только по ID, но и по имени.

$ docker attach ubuntu
# Подключения к контейнеру ubuntu

$ docker run -v /tmp:/root -ti <имя образа>
# Подмонтировать папку хоста в контейнер при создании
# Где /tmp – путь к папке на хосте, а /root – путь к папке на сервере. 
# Таким образом можно работать из контейнера с данными на хосте и исключить 
# необходимость копирования данных в обе стороны.

$ docker run -it -p 80:80 --name nginx ubuntu:trusty
# Создаёт чистый контейнер с Ubuntu 14.04 с открытыми 80 и 443 портами


$ docker build -t volitilov/nginx ~/project
# Строит образ из Docker файла где volitilov – название репозитория, где 
# будет храниться образ, nginx – имя образа. Последний параметр — путь к 
# папке с Dockerfile. Если вы не укажете название образа, он автоматически 
# получит название lastest.

$ docker build -t volitilov/nginx \ git@github.com:volitilov/nginx
# Указываем git репозиторий, где находится Dockerfile.

$ docker run -it 066b799ea548 /bin/bash
# Если инструкция не исполнится, мы можем создать контейнер из 
# предпоследнего шага с ID образа 066b799ea548

$ docker run -d centos tail -f /dev/null
# Запускает образ в фоновом режиме

$ docker build --no-cache -t volitilov/nginx .
# По-умолчанию Docker кеширует каждый шаг и формируя кеш сборок. Чтобы 
# отключить кеш, например для использования последнего apt-get update, 
# используйте флаг --no-cache.

$ docker pull nginx
# - Скачиваем образ nginx

$ docker run --name test_nginx2 -p 80:80 
    -v /home/x/html_files/:/usr/share/nginx/html:ro -d nginx
# - запускаем контейнер с именем (--name) test_nginx2 
# - (-p) делаем проброс портов хоста и контейнера
# - (-v) указываем дерикторию для монтирования с дерикторией контейнера nginx
# - (-d) указывает докеру запустить контейнер в фоновом режиме

